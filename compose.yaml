services:
  frontend:
    profiles: [production]
    build:
      context: ./frontend
      dockerfile: ./frontend.production.Dockerfile
    volumes:
      - frontend_dist:/app/dist
    ports:
      - 8080:8000



  backend:
    profiles: [production]
    env_file:
      - ./backend/.env.production.backend
    entrypoint: /bin/bash -c "export DATABASE_URL=postgresql://$(cat /run/secrets/db_user):$(cat /run/secrets/db_password)@$(cat /run/secrets/db_host)/$(cat /run/secrets/db_name) && diesel setup && diesel migration run && /usr/local/bin/profile_backend"
    secrets:
     - db_name
     - db_password
     - db_user
     - db_host
    build:
      context: ./backend
      dockerfile: ./backend.production.Dockerfile



  mock-frontend:
    profiles: [dev]
    build:
      context: ./frontend
      dockerfile: ./frontend.development.Dockerfile
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /deno-dir/src
        - action: rebuild
          path: ./frontend/deno.json
    ports:
      - 8080:8000

      
  mock-backend:
    profiles: [dev]
    entrypoint: /bin/bash -c "export DATABASE_URL=postgresql://$(tr -d '\n' < /run/secrets/db_user_dev):$(tr -d '\n' < /run/secrets/db_password_dev)@mock-database/$(tr -d '\n' < /run/secrets/db_name_dev) && diesel setup && diesel migration run && cargo run"
    secrets:
        - db_name_dev
        - db_password_dev
        - db_user_dev
    build:
      context: ./backend
      dockerfile: ./backend.development.Dockerfile
    depends_on:
      mock-database:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /rust-dir/src
    ports:
      - 8000:8000


  mock-database:
      profiles: [dev]
      image: postgres:latest
      secrets:
        - db_name_dev
        - db_password_dev
        - db_user_dev
      environment:
        POSTGRES_DB_FILE: /run/secrets/db_name_dev
        POSTGRES_PASSWORD_FILE: /run/secrets/db_password_dev
        POSTGRES_USER_FILE: /run/secrets/db_user_dev
      expose:
        - 5432
      ports:
      - "127.0.0.1:7900:5432"
      restart: always
      # set shared memory limit when using docker-compose
      shm_size: 128mb
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U $(tr -d '\n' < /run/secrets/db_user_dev) -d $(tr -d '\n' < /run/secrets/db_name_dev)"]
        interval: 10s
        retries: 5
        start_period: 30s
        timeout: 10s 

volumes:
  frontend_dist:


secrets:
  db_name:
    file: ./db_name.txt
  db_password:
    file: ./db_password.txt
  db_user:
    file: ./db_user.txt
  db_host:
    file: ./db_host.txt
  db_name_dev:
    file: ./db_name_dev.txt
  db_password_dev:
    file: ./db_password_dev.txt
  db_user_dev:
    file: ./db_user_dev.txt
  db_host_dev:
    file: ./db_host_dev.txt

